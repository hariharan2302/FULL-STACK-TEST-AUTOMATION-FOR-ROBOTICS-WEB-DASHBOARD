name: Robotics Dashboard Test Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
        browser: [chrome]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y chromium-browser
        sudo apt-get install -y sqlite3
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create test directories
      run: |
        mkdir -p test_reports
        mkdir -p test_screenshots
        mkdir -p test_logs
    
    - name: Start Flask application
      run: |
        python app.py &
        sleep 10
        curl -f http://localhost:5000/api/health || exit 1
    
    - name: Run tests with coverage
      env:
        BROWSER: ${{ matrix.browser }}
        HEADLESS: true
      run: |
        pytest tests/ \
          --junitxml=test_reports/junit.xml \
          --html=test_reports/report.html \
          --self-contained-html \
          --cov=app \
          --cov-report=html:test_reports/coverage \
          --cov-report=xml:test_reports/coverage.xml \
          --cov-report=term-missing \
          --alluredir=test_reports/allure-results \
          -v
    
    - name: Generate Allure report
      if: always()
      run: |
        pip install allure-pytest
        allure generate test_reports/allure-results --clean -o test_reports/allure-report
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}-${{ matrix.browser }}
        path: |
          test_reports/
          test_screenshots/
          test_logs/
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
      with:
        file: ./test_reports/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run security scan
      run: |
        bandit -r . -f json -o test_reports/security-scan.json || true
        safety check --json --output test_reports/safety-scan.json || true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: test_reports/security-scan.json,test_reports/safety-scan.json

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install performance tools
      run: |
        pip install locust
    
    - name: Start Flask application
      run: |
        python app.py &
        sleep 10
    
    - name: Run performance tests
      run: |
        locust -f tests/performance/locustfile.py --headless -u 10 -r 2 --run-time 60s --html=test_reports/performance-report.html || true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: test_reports/performance-report.html

  report-generation:
    runs-on: ubuntu-latest
    needs: [test, security-scan, performance-test]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Download all test artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Generate comprehensive report
      run: |
        python scripts/generate_report.py
    
    - name: Upload final report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-report
        path: final_report/ 